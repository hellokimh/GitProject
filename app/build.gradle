plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}

android {
    /**
     * 配置签名文件(使得签名生效需配置Build Types,表明生成release和debug版本时使用我们指定的签名文件)
     */
    signingConfigs {
        release {
            storeFile file('../project.jks')
            storePassword '123456'
            keyAlias 'android'
            keyPassword '123456'
        }
        debug {
            storeFile file('../project.jks')
            storePassword '123456'
            keyAlias 'android'
            keyPassword '123456'
        }
    }

    /**
     * 默认的配置
     */
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "com.example.testproject"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    /**
     * 打包时apk的后缀名
     */
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = variant.name + "-" + buildType.name + "-v" + defaultConfig.versionName + ".apk"
        }
    }

    /**
     * 多渠道打包(同一套代码可以设置不同包名,不同应用icon,不同应用的名称)
     * https://www.bilibili.com/read/cv6862926/
     * https://www.jianshu.com/p/81f9f235535d
     * https://blog.csdn.net/crazyman2010/article/details/53471162
     * https://www.jianshu.com/p/9d3dfdc5256c(具体看 flavorDimensions 是个什么东西,这是一个维度标识,各方面都讲解的比较详细和全面)
     */
    flavorDimensions 'versinonCode'
    productFlavors {
        //wen产品APP
        wen {
            dimension 'versinonCode'
            //程序包名
            applicationId "com.example.testproject.wen"
            //是否为主app
            buildConfigField "Boolean", "isMainApp", "false"
        }
        //butterfly产品APP,默认的APP
        butterfly {
            dimension 'versinonCode'
            //程序包名
            applicationId "com.example.testproject"
            //是否为主app
            buildConfigField "Boolean", "isMainApp", "true"
        }
    }


    /**
     * 打包APK时的类型、正式版本、测试版本、本地版本等
     * https://blog.csdn.net/weixin_37625173/article/details/100824010
     * https://blog.csdn.net/qq_34277487/article/details/103139172
     */
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            //manifestPlaceholders = [APP_NAME: "@string/app_name", APP_LOGO_ICON: "@mipmap/icon"]
            //正式apk的请求服务器地址
            buildConfigField "String", "BASE_URL", "\"http://47.242.139.124:8889/\""
            manifestPlaceholders = [APP_NAME: "@string/app_name"]
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //debug版本的签名文件指定正式版本的签名文件(防止第三方sdk集成时便于调试)
            signingConfig signingConfigs.release
            //会追加在 applicationId 字符串的后面,形成最终的包名,这样可以让包名不同,同时安装多个类型的应用
            applicationIdSuffix '.debug'
            //这里想配置我们应用的 logo 为测试版本的logo,方便测试人员区分不同类型的包,配置可以在 AndroidManifest.xml 中使用的参*-33数。
            //manifestPlaceholders = [APP_LOGO_ICON: "@mipmap/debug_icon"]
            //这里想配置我们应用的 名字 为测试版本的应用名字,方便测试人员区分不同类型的包,配置可以在 AndroidManifest.xml 中使用的参数。
            //manifestPlaceholders = [APP_NAME: "@string/app_debug_name", APP_LOGO_ICON: "@mipmap/debug_icon"]
            //测试apk请求服务器的地址
            buildConfigField "String", "BASE_URL", "\"http://47.242.139.124:8883/\""
            manifestPlaceholders = [APP_NAME: "@string/app_debug_name"]
        }
    }


    /**
     * java的版本配置
     */
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}